class Line : public Shape {
public:
    Line(Point origin, float length, float thickness, Color shapeColor);

    // Implement Shape's pure virtual functions
    void resolve(float stickX, float stickY) override;
    Point get_center() const override;
    float get_scaleX() const override;
    float get_scaleY() const override;
    int get_segments() const override;
    float get_lod() const override;
    Color get_shape_fill_color() const override;
    void set_points(const std::vector<Point>& points) override;
    std::vector<Point> get_points() const override;

private:
    Point center;
    float scaleX;
    float scaleY;
    int segments;
    float lod;
    Color shapeColor;
    std::vector<Point> points;
};

class Fan : public Shape {
public:
    Fan(Point origin, float radius, int segments, Color shapeColor);

    // Implement Shape's pure virtual functions
    void resolve(float stickX, float stickY) override;
    Point get_center() const override;
    float get_scaleX() const override;
    float get_scaleY() const override;
    int get_segments() const override;
    float get_lod() const override;
    Color get_shape_fill_color() const override;
    void set_points(const std::vector<Point>& points) override;
    std::vector<Point> get_points() const override;

private:
    Point center;
    float radius;
    int segments;
    float lod;
    Color shapeColor;
    std::vector<Point> points;
};

class Strip : public Shape {
public:
    Strip(Point origin, float length, float width, int segments, Color shapeColor);

    // Implement Shape's pure virtual functions
    void resolve(float stickX, float stickY) override;
    Point get_center() const override;
    float get_scaleX() const override;
    float get_scaleY() const override;
    int get_segments() const override;
    float get_lod() const override;
    Color get_shape_fill_color() const override;
    void set_points(const std::vector<Point>& points) override;
    std::vector<Point> get_points() const override;

private:
    Point center;
    float length;
    float width;
    int segments;
    float lod;
    Color shapeColor;
    std::vector<Point> points;
};